# Default values for threshold.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

# Static API configurations.
# Note: if you want to use threshold-controller, you don't have to configure any static APIs.
# For more examples see https://www.threshold.cloud/docs
staticApis: {}
# This creates an example API for the backend 'example.com', with content cached for 60 seconds.
# To use this, uncomment the lines below and remove the curly braces after 'staticApis' above.
#
#  example.kts: |
#    import kamara.dsl.*
#    apis {
#      api("example") {
#        version = "1.0"
#        backend = "http://example.com"
#        policies {
#          cache duration 60.seconds
#        }
#      }
#    }

gateway:
  replicaCount: 1
  image:
    repository: threshold/gateway
    tag: latest
    pullPolicy: IfNotPresent

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

controller:
  # Determines whether the controller and its supporting objects are deployed
  enabled: true

  # The namespace containing the ConfigMap and gateway Deployment
  namespace: default

  # How often (in seconds) the controller should check for annotated Services
  pollFrequency: 60

  image:
    repository: threshold/controller
    tag: latest
    pullPolicy: IfNotPresent

  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  nodeSelector: {}
  tolerations: []
  affinity: {}

service:
  # Change to ClusterIP if using Ingress
  type: LoadBalancer
  port: 80
  annotations: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  paths: []
  hosts:
    - threshold-example.local
  tls: []
  #  - secretName: threshold-example-tls
  #    hosts:
  #      - threshold-example.local

# Custom policy scripts, to which you can refer in your policies.
# For more examples see https://www.threshold.cloud/docs
scripts: {}
# This adds a script that replaces any empty response body with an empty JSON object.
# To use this, uncomment the lines below and remove the curly braces after 'scripts' above.
# Then add a policy like this: script file "/opt/kamara/scripts/response.js"
#
#  response.js: |
#    // ensure every empty response body is replaced with an empty JSON object
#    if (!response.body || response.body.length === 0) {
#      logger.info('Returning empty JSON object for empty response body from: ' + url);
#      response.body = '{}';
#    }

# If you have a license key, you enter it here, along with the matching
# email address for which it was created.
license:
  key: ""
  email: ""
